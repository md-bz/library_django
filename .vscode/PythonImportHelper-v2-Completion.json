[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "get_books",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "get_book",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "get_book_by_id",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "get_books",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "get_book",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "get_book_by_id",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Library\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Library\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Library\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Library\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"Library\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "Api.apps",
        "description": "Api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'Api'",
        "detail": "Api.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Api.urls",
        "description": "Api.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"books/\",views.index,name=\"index\"),\n    path(\"books/<int:id>/\",views.book_by_id,name=\"book_by_id\"),    \n    path(\"books/<slug:slug>/\",views.book,name=\"book\"),\n    path(\"<path:path>/\",views.not_found),\n]",
        "detail": "Api.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "Api.views",
        "description": "Api.views",
        "peekOfCode": "def index(request):\n    return JsonResponse({\"books\":get_books()})\ndef book(request,slug):\n    book = get_book(slug)\n    if book:\n        return JsonResponse(book)\n    else:\n        return JsonResponse({\"error\":\"Book not found\"},status=404)\ndef book_by_id(request,id):\n    book = get_book_by_id(id)",
        "detail": "Api.views",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 2,
        "importPath": "Api.views",
        "description": "Api.views",
        "peekOfCode": "def book(request,slug):\n    book = get_book(slug)\n    if book:\n        return JsonResponse(book)\n    else:\n        return JsonResponse({\"error\":\"Book not found\"},status=404)\ndef book_by_id(request,id):\n    book = get_book_by_id(id)\n    if book:\n        return JsonResponse(book)",
        "detail": "Api.views",
        "documentation": {}
    },
    {
        "label": "book_by_id",
        "kind": 2,
        "importPath": "Api.views",
        "description": "Api.views",
        "peekOfCode": "def book_by_id(request,id):\n    book = get_book_by_id(id)\n    if book:\n        return JsonResponse(book)\n    else:\n        return JsonResponse({\"error\":\"Book not found\"},status=404)  \ndef not_found(request,path):\n    return JsonResponse({\"error\":\"Not found\"},status=404)",
        "detail": "Api.views",
        "documentation": {}
    },
    {
        "label": "not_found",
        "kind": 2,
        "importPath": "Api.views",
        "description": "Api.views",
        "peekOfCode": "def not_found(request,path):\n    return JsonResponse({\"error\":\"Not found\"},status=404)",
        "detail": "Api.views",
        "documentation": {}
    },
    {
        "label": "ErrorsConfig",
        "kind": 6,
        "importPath": "Errors.apps",
        "description": "Errors.apps",
        "peekOfCode": "class ErrorsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'Errors'",
        "detail": "Errors.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Errors.urls",
        "description": "Errors.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"not-found/\",views.not_found,name=\"not_found\"),\n]",
        "detail": "Errors.urls",
        "documentation": {}
    },
    {
        "label": "not_found",
        "kind": 2,
        "importPath": "Errors.views",
        "description": "Errors.views",
        "peekOfCode": "def not_found(request):\n    return render(request, \"Errors/404.html\")",
        "detail": "Errors.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Library.asgi",
        "description": "Library.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "Library.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-ugd)0wamvhc=&&t^b8rbe+o_t_aqqt*eje2%tw(+dl-(=fm*67'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-ugd)0wamvhc=&&t^b8rbe+o_t_aqqt*eje2%tw(+dl-(=fm*67'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"Library\",\n    \"Errors\",\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"Library\",\n    \"Errors\",\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"Library\",\n    \"Errors\",\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"Library\",\n    \"Errors\",\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'Library.urls'",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "ROOT_URLCONF = 'Library.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "WSGI_APPLICATION = 'Library.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "Library.settings",
        "description": "Library.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Library.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Library.urls",
        "description": "Library.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path(\"\",views.index,name=\"index\"),\n    path(\"api/\",include(\"Api.urls\")),\n    path(\"errors/\",include(\"Errors.urls\")),\n    path(\"books/<int:id>/\",views.book_by_id,name=\"book_by_id\"),\n    path(\"books/<slug:slug>/\",views.book,name=\"book\"),\n    path(\"<path:path>/\",views.not_found),\n]",
        "detail": "Library.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "Library.views",
        "description": "Library.views",
        "peekOfCode": "def index(request):\n    return render(request, \"Library/index.html\",{\"books\":get_books()})\ndef book(request,slug):\n    book = get_book(slug)\n    if book:\n        return render(request, \"Library/book.html\",{\"book\":book})\n    else:\n        return render(request, \"Library/404.html\")\ndef book_by_id(request,id):\n    book = get_book_by_id(id)",
        "detail": "Library.views",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 2,
        "importPath": "Library.views",
        "description": "Library.views",
        "peekOfCode": "def book(request,slug):\n    book = get_book(slug)\n    if book:\n        return render(request, \"Library/book.html\",{\"book\":book})\n    else:\n        return render(request, \"Library/404.html\")\ndef book_by_id(request,id):\n    book = get_book_by_id(id)\n    if book:\n        return render(request, \"Library/book.html\",{\"book\":book})",
        "detail": "Library.views",
        "documentation": {}
    },
    {
        "label": "book_by_id",
        "kind": 2,
        "importPath": "Library.views",
        "description": "Library.views",
        "peekOfCode": "def book_by_id(request,id):\n    book = get_book_by_id(id)\n    if book:\n        return render(request, \"Library/book.html\",{\"book\":book})\n    else:\n        return render(request, \"Library/404.html\")  \ndef not_found(request,path):\n    return redirect(\"not_found\")",
        "detail": "Library.views",
        "documentation": {}
    },
    {
        "label": "not_found",
        "kind": 2,
        "importPath": "Library.views",
        "description": "Library.views",
        "peekOfCode": "def not_found(request,path):\n    return redirect(\"not_found\")",
        "detail": "Library.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Library.wsgi",
        "description": "Library.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "Library.wsgi",
        "documentation": {}
    },
    {
        "label": "read_books_from_file",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def read_books_from_file() -> Dict[str, Any]:\n    with open(FILENAME, \"r\") as file:\n        return json.load(file)\ndef write_books_to_file(books: Dict[str, Any]) -> None:\n    with open(FILENAME, \"w\") as file:\n        json.dump(books, file, indent=4)\ndef get_book(slug: str) -> Optional[Dict[str, Any]]:\n    books = read_books_from_file()\n    return next((book for book in books.values() if book[\"slug\"] == slug), None)\ndef get_books() -> Dict[str, Any]:",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "write_books_to_file",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def write_books_to_file(books: Dict[str, Any]) -> None:\n    with open(FILENAME, \"w\") as file:\n        json.dump(books, file, indent=4)\ndef get_book(slug: str) -> Optional[Dict[str, Any]]:\n    books = read_books_from_file()\n    return next((book for book in books.values() if book[\"slug\"] == slug), None)\ndef get_books() -> Dict[str, Any]:\n    return read_books_from_file()\ndef get_book_by_id(book_id: int) -> Optional[Dict[str, Any]]:\n    books = read_books_from_file()",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "get_book",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def get_book(slug: str) -> Optional[Dict[str, Any]]:\n    books = read_books_from_file()\n    return next((book for book in books.values() if book[\"slug\"] == slug), None)\ndef get_books() -> Dict[str, Any]:\n    return read_books_from_file()\ndef get_book_by_id(book_id: int) -> Optional[Dict[str, Any]]:\n    books = read_books_from_file()\n    return books.get(str(book_id))\ndef remove_book(book_id: int) -> None:\n    books = read_books_from_file()",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "get_books",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def get_books() -> Dict[str, Any]:\n    return read_books_from_file()\ndef get_book_by_id(book_id: int) -> Optional[Dict[str, Any]]:\n    books = read_books_from_file()\n    return books.get(str(book_id))\ndef remove_book(book_id: int) -> None:\n    books = read_books_from_file()\n    if str(book_id) in books:\n        del books[str(book_id)]\n        write_books_to_file(books)",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "get_book_by_id",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def get_book_by_id(book_id: int) -> Optional[Dict[str, Any]]:\n    books = read_books_from_file()\n    return books.get(str(book_id))\ndef remove_book(book_id: int) -> None:\n    books = read_books_from_file()\n    if str(book_id) in books:\n        del books[str(book_id)]\n        write_books_to_file(books)\ndef add_book(book: Dict[str, Any]) -> None:\n    books = read_books_from_file()",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "remove_book",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def remove_book(book_id: int) -> None:\n    books = read_books_from_file()\n    if str(book_id) in books:\n        del books[str(book_id)]\n        write_books_to_file(books)\ndef add_book(book: Dict[str, Any]) -> None:\n    books = read_books_from_file()\n    books[str(book[\"id\"])] = book\n    write_books_to_file(books)\ndef update_book(book: Dict[str, Any]) -> None:",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "add_book",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def add_book(book: Dict[str, Any]) -> None:\n    books = read_books_from_file()\n    books[str(book[\"id\"])] = book\n    write_books_to_file(books)\ndef update_book(book: Dict[str, Any]) -> None:\n    books = read_books_from_file()\n    if str(book[\"id\"]) in books:\n        books[str(book[\"id\"])] = book\n        write_books_to_file(books)",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "update_book",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def update_book(book: Dict[str, Any]) -> None:\n    books = read_books_from_file()\n    if str(book[\"id\"]) in books:\n        books[str(book[\"id\"])] = book\n        write_books_to_file(books)",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "FILENAME",
        "kind": 5,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "FILENAME = \"db.json\"\ndef read_books_from_file() -> Dict[str, Any]:\n    with open(FILENAME, \"r\") as file:\n        return json.load(file)\ndef write_books_to_file(books: Dict[str, Any]) -> None:\n    with open(FILENAME, \"w\") as file:\n        json.dump(books, file, indent=4)\ndef get_book(slug: str) -> Optional[Dict[str, Any]]:\n    books = read_books_from_file()\n    return next((book for book in books.values() if book[\"slug\"] == slug), None)",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Library.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]